-- \/\/\/ DO NOT MODIFY THE FOLLOWING LINES \/\/\/

module Lab3(Fruit(Apple,Banana,Lemon),sumPrice,BSTree(Void,BSNode),subTree,Tree(Node),count,labels,height,(++),elem,last,reverse,filter) where

    import Prelude hiding ((++),elem,last,reverse,filter)
    
    -- /\/\/\ DO NOT MODIFY THE PRECEDING LINES /\/\/\
    
    {- 1.1 -}
    -- remember to provide the datatype representation
    data Fruit = Apple Double
     | Banana Double
     | Lemon Int
    
    {- 1.2 -}
    -- remember to provide a function specification
    sumPrice :: [Fruit] -> Double -> Double -> Double -> Double
    sumPrice ((Apple a):xs) ap bp lp = a*ap + sumPrice xs ap bp lp
    sumPrice ((Banana a):xs)ap bp lp = a*bp + sumPrice xs ap bp lp
    sumPrice ((Lemon a):xs) ap bp lp = (fromIntegral a) * lp + sumPrice xs ap bp lp
    sumPrice [] _ _ _ = 0
    {-
    sumPrice f a b l
    take a lists of fruits and sum the fruits price given in a(apple) b(banana) l(lemon)
    PRE: you must have a list with fruit
    RETURNS : sum of fruit prices
    EXAMPLES: sumPrice [Banana 4.0, Apple 3.0, Lemon 7, Banana 2.0, Apple 1.0, Lemon 1] 3.0 2.0 5.0 == 64.0
          sumPrice [Apple 2.0] 2.0 4.0 8.0 == 4.0
    sumPrice :: [Fruit] -> Double -> Double -> Double -> Double
    -}
    
    {- 2 -}
    
    {- Binary search trees
    
       Void represents an empty tree. BSNode l x r represents a tree with
       left subtree l, root label x, and right subtree r.
    
       INVARIANT: in every tree of the form BSNode l x r, all labels in l
         are < x, and all labels in r are > x.
     -}
    data BSTree = Void | BSNode BSTree Integer BSTree deriving Show -- do not modify this line
    
    -- remember to provide a function specification
    subTree :: Integer -> Integer -> BSTree -> BSTree
    subTree _ _ Void = Void
    subTree a b (BSNode lt self rt) 
     | self < a = subTree a b rt
     | self >= a && self < b = (BSNode (subTree a b lt)  self  (subTree a b rt))
     | self >= b = subTree a b lt
    {-
    sumPrice f a b l
    take a lists of fruits and sum the fruits price given in a(apple) b(banana) l(lemon)
    PRE: you must have a list with fruit
    RETURNS : sum of fruit prices
    EXAMPLES: sumPrice [Banana 4.0, Apple 3.0, Lemon 7, Banana 2.0, Apple 1.0, Lemon 1] 3.0 2.0 5.0 == 64.0
          sumPrice [Apple 2.0] 2.0 4.0 8.0 == 4.0
    sumPrice :: [Fruit] -> Double -> Double -> Double -> Double
    -}
    
    {- 3.1 -}
    -- remember to provide the datatype representation
    data Tree a = Node a [Tree a] deriving Show
    
    
    {- 3.2 a) -}
    -- remember to provide a function specification
    count:: Tree a -> Integer
    count (Node _ (x:xs)) = 1 + count x + count2 xs 
    count (Node _ []) = 1
    
    count2:: [Tree a] -> Integer
    count2 ((Node _ (x:xs)) : ys) = 1 + count x + count2 xs + count2 ys
    count2 [] = 0
    
    
    {- 3.2 b) -}
    -- remember to provide a function specification
    labels:: Tree a -> [a]
    
    label (Node a (x:xs)) = [a] ++ label x ++ label2 xs 
    label (Node a []) = [a]
    
    label2:: [Tree a] -> [a]
    label2 ((Node a (x:xs)) : ys) = [a] ++ label x ++ label2 xs ++ label2 ys
    label2 [] = []
    
    {- 3.2 c) -}
    -- remember to provide a function specification
    height:: Tree a -> Integer
    height (Node a (x:xs)) = (max (height x) (height2 xs)) + 1 
    height (Node a []) = 1
    
    height2:: [Tree a] -> Integer
    height2 ((Node a (x:xs)) : ys) = (max ((max (height x) (height2 xs))+1) (height2 ys) )
    height2 [] = 0
    
    {- 4.1 -}
    -- remember to provide a function specification
    (++) :: [a]->[a]->[a]
    (++) [a] [a] = 
    
    {- 4.2 -}
    -- remember to provide a function specification
    elem = undefined  -- remove "undefined" and write your function here
    
    {- 4.3 -}
    -- remember to provide a function specification
    last = undefined  -- remove "undefined" and write your function here
    
    {- 4.4 -}
    -- remember to provide a function specification
    reverse = undefined  -- remove "undefined" and write your function here
    
    {- 4.5 -}
    -- remember to provide a function specification
    filter = undefined  -- remove "undefined" and write your function here
    